<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://simonid.github.io/"/>
  <updated>2017-03-08T05:19:48.000Z</updated>
  <id>https://simonid.github.io/</id>
  
  <author>
    <name>simon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://simonid.github.io/2017/03/10/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1NetworkManager%E4%B8%8Einterfaces%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B/"/>
    <id>https://simonid.github.io/2017/03/10/记录一次NetworkManager与interfaces冲突的解决过程/</id>
    <published>2017-03-10T11:45:13.106Z</published>
    <updated>2017-03-08T05:19:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><h3>记录一次NetworkManager与interfaces冲突的解决</h3><br><br><br>&emsp;主机是ubuntu14.04，之前改过/etc/network/interfaces的配置内容（设置了静态ip），然后发现图形界面上的网络设置失效了，而且因为修改了interfaces之后还不能连接网络，ifconfig的时候不显示wlan0和eth0的信息，反而多了一个tun0-00。下面是一些解决的步骤：<p></p>
<p>&emsp;首先，重新编辑interfaces文件和/etc/resolv.conf文件，使他们恢复默认设置，然后重启，失败。先解决eth0的问题吧。网线接上电脑，手动开启eth0：</p>
<p>sudo ip link set eth0 up 或 sudo ifconfig eth0 up</p>
<p>&emsp;再查看一下，ifconfig，如果没有ipv4地址，尝试：<br></p>
<font color="#DC143C"><br>sudo dhclient eth0<br></font><br><br>&emsp;然后ping一下同网段ip，失败的话，尝试nc命令<br><br>&emsp;如果ICMP被禁了，使用nc命令或者telnet更适合，且可以探测端口是否开放,虽然DHCP端口是67，不过通常DHCP和DNS服务器是同一台机器，因此顺便测试53端口：<br><br>nc -zv 192.168.1.1 67<br><br>nc -zv 192.168.1.1 53<br><br><a id="more"></a><br>&emsp;如果服务器的IP不是通过DHCP获取的动态IP，而是静态IP，则需要手动设置IP地址，使用ifconfig配置:<br><br>sudo ifconfig eth0 192.168.1.105/24 gw 192.168.1.1<br><br>或者<br><br>sudo ip addr add 172.16.0.2/24 dev eth0<br><br>sudo route add default gw 172.16.0.1 dev eth0<br><br>配置完eth0之后，查看wlan0。<br><br>&emsp;ubuntu上有两套管理网络的系统，一个是interfaces文件（网络设置由配置文件决定）和NetworkManager（网络设置由图形界面决定），它们二者之间只能使用一个，所以，在需要修改interfaces的时候（比如固定ip），要先把NetworkManager的服务屏蔽掉，service network-manager stop.之所以遇到这样的问题就是在修改interfaces之前没有对NetworkManager进行管理<br><br>wlan0比较复杂，先尝试开启并连上网络<br><br>1.. 打开无线网卡电源<br><br>iwconfig wlan0 txpower on 或者 sudo ip link set wlan0 up<br><br>列出区域内的无线网络<br>iwlist wlan0 scan 或者 sudo iw dev wlan0 scan | less<br><br>3.连接wifi<br><br>假如wifi没有加密：sudo iw dev wlan0 connect [网络 SSID]<br><br>假如是WEP加密：sudo iw dev wlan0 connect [网络 SSID] key 0:[WEP 密钥]<br><br>假如是WPA或者WPA2加密的话，就比较麻烦了，需要借助wpasupplicant这个工具<br><br>编辑_/etc/wpa_supplicant/wpa_supplicant.conf<br><br><font color="#0099ff"><br>network={<br><br>ssid=”[网络 ssid]“<br><br>psk=”[密码]“<br><br>priority=1<br><br>}<br></font>

<p>重启网络</p>
<p>后台开启：sudo wpa_supplicant -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf</p>
<p>然后dhcp获取：sudo dhclient wlan0 或 sudo dhcpcd wlan0</p>
<p>如果正常的话，查看wlan0信息，输入<br>iwconfig wlan0</p>
<p>启用无线网卡<br>ifconfig wlan0 up</p>
<p>如果是用DHCP获取IP的，那么用dhclient 或dhcpcd获取ip<br>dhclient wlan0</p>
<p>或</p>
<p>dhcpcd wlan0</p>
<p>&emsp;通过interfaces适合修改server版的linux，对于平常个人使用不方便，因为假如要连接新的wifi，每次都要新增配置文件，那么如何恢复原来的图形界面，也就是NetworkManager呢</p>
<p>首先要确保自己的图形界面设置没有修改过</p>
<p>比如/etc/dbus-1/system.d/org.freedesktop.NetworkManager.conf</p>
<font cokor="#DC143C"><br>cat /etc/dbus-1/system.d/org.freedesktop.NetworkManager.conf<br></font><br><font face="黑体" color="#0099ff"><br>&lt;!DOCTYPE busconfig PUBLIC<br><br>“-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN”<br><br>“<a href="http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd&quot;&gt;" target="_blank" rel="external">http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd&quot;&gt;</a>;<br><br><busconfig><br><br>&lt;policy user=”root”&gt;<br><br>            &lt;allow own=”org.freedesktop.NetworkManager”/&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.PPP”/&gt;<br><br><br><br>            &lt;allow send_interface=”org.freedesktop.NetworkManager.SecretAgent”/&gt;<br><br><br><br>            &lt;!– Allow NM to talk to known VPN plugins; due to a bug in<br><br>                 the D-Bus daemon, when a plugin is installed and the user<br><br>                 immediately tries to use it, the VPN plugin’s rules aren’t<br><br>                 always loaded into dbus-daemon.  Those rules allow NM to<br><br>                 talk to the plugin.  Oops.  Work around that by explicitly<br><br>                 allowing NM to talk to VPN plugins here.<br><br>              –&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager.openconnect”/&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager.openswan”/&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager.openvpn”/&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager.pptp”/&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager.vpnc”/&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager.ssh”/&gt;<br><br><br><br>            &lt;!– Allow the custom name for the dnsmasq instance spawned by NM<br><br>                 from the dns dnsmasq plugin to own it’s dbus name, and for<br><br>                 messages to be sent to it.<br><br>             –&gt;<br><br>            &lt;allow own=”org.freedesktop.NetworkManager.dnsmasq”/&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager.dnsmasq”/&gt;<br><br>    &lt;/policy&gt;<br><br>    &lt;policy at_console=”true”&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.DBus.Introspectable”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.DBus.Properties”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.AccessPoint”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.Connection.Active”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.Device.Modem”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.Device.Wired”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.Device.Serial”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.Device.Wireless”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.Device”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.DHCP4Config”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.IP4Config”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.VPN.Connection”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.AgentManager”/&gt;<br><br><br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”<br><br>                   send_member=”SetLogging”/&gt;<br><br><br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”<br><br>                   send_member=”Sleep”/&gt;<br><br><br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”<br><br>                   send_member=”sleep”/&gt;<br><br><br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”<br><br>                   send_member=”wake”/&gt;<br><br>    &lt;/policy&gt;<br><br>    &lt;policy user=”whoopsie”&gt;<br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.DBus.Introspectable”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.DBus.Properties”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.Connection.Active”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.Device”/&gt;<br><br>    &lt;/policy&gt;<br><br>    &lt;policy context=”default”&gt;<br><br>            &lt;deny own=”org.freedesktop.NetworkManager”/&gt;<br><br><br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.Settings”/&gt;<br><br><br><br>            &lt;allow send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager.AgentManager”/&gt;<br><br><br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”<br><br>                   send_member=”SetLogging”/&gt;<br><br><br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”<br><br>                   send_member=”Sleep”/&gt;<br><br><br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”<br><br>                   send_member=”sleep”/&gt;<br><br><br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager”<br><br>                   send_interface=”org.freedesktop.NetworkManager”<br><br>                   send_member=”wake”/&gt;<br><br><br><br>            &lt;deny own=”org.freedesktop.NetworkManager.dnsmasq”/&gt;<br><br>            &lt;deny send_destination=”org.freedesktop.NetworkManager.dnsmasq”/&gt;<br><br>    &lt;/policy&gt;<br></busconfig><br></font>

<p>然后还有/etc/xdg/autostart/nm-applet.desktop：</p>
<font color="#0099ff"><br>[Desktop Entry]<br><br>Name=Network<br><br>Comment=Manage your network connections<br><br>Icon=nm-device-wireless<br><br>Exec=nm-applet<br><br>Terminal=false<br><br>Type=Application<br><br>NoDisplay=true<br><br>NotShowIn=KDE;<br><br>X-GNOME-Bugzilla-Bugzilla=GNOME<br><br>X-GNOME-Bugzilla-Product=NetworkManager<br><br>X-GNOME-Bugzilla-Component=nm-applet<br><br>X-GNOME-UsesNotifications=true<br><br>AutostartCondition=GNOME3 unless-session gnome<br><br>X-Ubuntu-Gettext-Domain=nm-applet<br><br></font><br>网上有种说法：<a href="http://blog.csdn.net/cor\_twi/article/details/43836681" target="_blank" rel="external">http://blog.csdn.net/cor\_twi/article/details/43836681</a><br><br>但是按照这种做法没有用<br><br>如果要用图形界面，到/etc/NetworkManager/nm-system-settings.conf下，把<br><br>[ifupdown]<br><br>managed=false（应该是修改了interfaces之后自动改成false的）<br><br>中的false改成true<br><br>&emsp;上述的方法能够重新使用有线和无线，但是也有留下不少的问题没有解决，比如开机的时候就要比平时等多2–3分钟（猜测是修改了配置之后通过NetworkManager管理网络的话是不会保留上一次工作的网络信息，然后导致本次开机重新加载），而且要通过图形界面配置网络的话，要在开机的时候输入：<br><br>sudo service network-manager restart<br><br>而且，此时的图形控制栏是缺少了一些功能的，比如关闭wifi，比如vpn配置，假如要关闭wifi，就通过sudo ifdown wlan0。<br><br>假如是要配置vpn，也可以通过命令行实现，下面有两个方法：<br><br>方法1：<br><br>sudo pptpsetup –create testvpn –server 123.45.67.88 –username kk –password fku –encrypt –start<br><br>&emsp;–create 后的是创建的连接名称，可以为任意名称; –server 后接的是vpn服务器的IP; –username 是用户名 –password 是密码，在这也可以没这个参数，命令稍后会自动询问。这样可以保证账号安全 –encrypt 是表示需要加密，不必指定加密方式，命令会读取配置文件中的加密方式 –start 是表示创建连接完后马上连接，如果你不想连，就不写<br><br>连接：sudo pon vpnname<br><br>查看状态：plog<br><br>断开：sudo poff<br><br>方法2：<br><br>连接：<br><br>~$ sudo nmcli -p c up id VPN-Green<br><br>断开连接：<br><br>~$ sudo nmcli -p c down id VPN-Green<br><br>修改/etc/NetworkManagersystem-connections/VPN-Green<br><br><font color="#FF7F50"><br>password-flags=0<br><br>[vpn-secrets]<br><br>password=<strong><em>*</em></strong><br><br>[connection]<br><br>id=VPN-Green （名字）<br><br>uuid=9b17f157-fb28-42bf-b092-d3e4a56682f1<br><br>type=vpn<br><br>permissions=user:tomcat:;<br><br>autoconnect=false<br><br>timestamp=1444354237<br><br>[vpn]<br><br>service-type=org.freedesktop.NetworkManager.pptp<br><br>gateway=a.sggjsq.com<br><br>require-mppe=yes<br><br>user=<strong><em>*</em></strong><br><br>password-flags=0<br><br>[vpn-secrets]<br><br>password=<strong><em>*</em></strong><br><br>[ipv4]<br><br>method=auto<br><br></font>

<p>参考：<a href="http://int32bit.me/2016/04/18/Linux%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E6%80%BB%E7%BB%93/" target="_blank" rel="external">http://int32bit.me/2016/04/18/Linux%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E6%80%BB%E7%BB%93/</a></p>
<p><a href="https://linux.cn/article-4015-1.html" target="_blank" rel="external">https://linux.cn/article-4015-1.html</a></p>
<p><a href="http://blog.chinaunix.net/uid-108431-id-4096909.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-108431-id-4096909.html</a></p>
<p>vpn设置和命令：<a href="http://blog.sina.com.cn/s/blog_630d9b440100fjpu.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_630d9b440100fjpu.html</a></p>
<p>（参照上面三个完成）</p>
<p><a href="http://wiki.ubuntu.org.cn/UbuntuManual:%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE\#.E9.85.8D.E7.BD.AE.E6.97.A0.E7.BA.BF.E7.BD.91.E5.8D.A1.28Wi-Fi.29.E6.8E.A5.E5.8F.A3" target="_blank" rel="external">http://wiki.ubuntu.org.cn/UbuntuManual:%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE\#.E9.85.8D.E7.BD.AE.E6.97.A0.E7.BA.BF.E7.BD.91.E5.8D.A1.28Wi-Fi.29.E6.8E.A5.E5.8F.A3</a></p>
<p><a href="https://wiki.debian.org/zh\_CN/NetworkConfiguration" target="_blank" rel="external">https://wiki.debian.org/zh\_CN/NetworkConfiguration</a></p>
<p><a href="http://www.cnblogs.com/xuanfengling/p/3410551.html" target="_blank" rel="external">http://www.cnblogs.com/xuanfengling/p/3410551.html</a></p>
<p><a href="http://blog.csdn.net/pkueecser/article/details/7165865" target="_blank" rel="external">http://blog.csdn.net/pkueecser/article/details/7165865</a></p>
<p>来源： <a href="https://www.gitbook.com/book/simonid/linux/edit#/edit/master/记录一次关于networkmanager和interfaces的问题.md?_k=qmiwfi" target="_blank" rel="external">https://www.gitbook.com/book/simonid/linux/edit#/edit/master/记录一次关于networkmanager和interfaces的问题.md?_k=qmiwfi</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&lt;h3&gt;记录一次NetworkManager与interfaces冲突的解决&lt;/h3&gt;&lt;br&gt;&lt;br/&gt;&lt;br&gt;&amp;emsp;主机是ubuntu14.04，之前改过/etc/network/interfaces的配置内容（设置了静态ip），然后发现图形界面上的网络设置失效了，而且因为修改了interfaces之后还不能连接网络，ifconfig的时候不显示wlan0和eth0的信息，反而多了一个tun0-00。下面是一些解决的步骤：&lt;/p&gt;
&lt;p&gt;&amp;emsp;首先，重新编辑interfaces文件和/etc/resolv.conf文件，使他们恢复默认设置，然后重启，失败。先解决eth0的问题吧。网线接上电脑，手动开启eth0：&lt;/p&gt;
&lt;p&gt;sudo ip link set eth0 up 或 sudo ifconfig eth0 up&lt;/p&gt;
&lt;p&gt;&amp;emsp;再查看一下，ifconfig，如果没有ipv4地址，尝试：&lt;br/&gt;&lt;/p&gt;
&lt;font color=#DC143C&gt;&lt;br&gt;sudo dhclient eth0&lt;br&gt;&lt;/font&gt;&lt;br/&gt;&lt;br&gt;&amp;emsp;然后ping一下同网段ip，失败的话，尝试nc命令&lt;br&gt;&lt;br&gt;&amp;emsp;如果ICMP被禁了，使用nc命令或者telnet更适合，且可以探测端口是否开放,虽然DHCP端口是67，不过通常DHCP和DNS服务器是同一台机器，因此顺便测试53端口：&lt;br&gt;&lt;br&gt;nc -zv 192.168.1.1 67&lt;br&gt;&lt;br&gt;nc -zv 192.168.1.1 53&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://simonid.github.io/2017/03/10/hello-world/"/>
    <id>https://simonid.github.io/2017/03/10/hello-world/</id>
    <published>2017-03-10T11:45:13.025Z</published>
    <updated>2017-01-16T06:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c语言存储空间</title>
    <link href="https://simonid.github.io/2017/03/10/c%E8%AF%AD%E8%A8%80%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/"/>
    <id>https://simonid.github.io/2017/03/10/c语言存储空间/</id>
    <published>2017-03-09T16:03:06.000Z</published>
    <updated>2017-03-10T11:44:34.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2><center>c语言存储空间</center></h2><p></p>
<font color="red"><h3>内存分布</h3></font><br><table><tr><td bgcolor="#7FFFD4">栈区(stack):</td></tr></table><br><font color="#0000ff">分配和释放方式：</font>有编译器自动分配和释放<br><br><font color="#0000ff">存放的内容：</font>局部变量，参数<br><br><font color="#0000ff">特点：</font>后进先出，可以用于现场保护<br><br><table><tr><td bgcolor="#7FFFD4">堆区(heap):</td></tr></table><br><font color="#0000ff">分配和释放方式：</font>用户手动分配和释放，程序退出会自动释放<br><br><font color="#0000ff">存放的内容：</font>动态分配内存的内容<br><br><font color="#0000ff">特点：</font>可以自由划分大小，可以动态调整内存大小<br><br><font color="#0000ff">堆内存申请：</font>系统有记录空闲内存地址的链表，用户申请内存的时候就会找到空间大于用户申请内存大小的节点，所以分配的地址是随机的<br><br><a id="more"></a><br><font color="#0000ff">剩余内存的处理</font>多余部分经系统重新回收放到空闲内存链表<br><br><font color="#0000ff">首地址记录大小</font>分配内存的首地址存放该堆的大小<br><br><table><tr><td bgcolor="#7FFFD4">全局区/静态区:</td></tr></table><br><font color="#0000ff">分配和释放方式：</font>编译器分配内存，程序退出时系统自动释放内存<br><br><font color="#0000ff">存放的内容：</font>全局变量，静态变量<br><br><font color="#0000ff">特点：</font>全局和静态变量都是存储在同个区，初始化的两种变量和未初始化的变量存储在不同的两个区域，但是这两个区间相邻<br><br><table><tr><td bgcolor="#7FFFD4">常量区:</td></tr></table><br><font color="#0000ff">分配和释放方式：</font>退出程序时系统自动释放<br><br><font color="#0000ff">存放内容：</font>常量<br><br><table><tr><td bgcolor="#7FFFD4">代码区:</td></tr></table><br><font color="#0000ff">分配和释放方式：</font>编译器分配，程序退出时系统自动释放<br><br><font color="#0000ff">存放内容</font>二进制代码和特殊变量<br><br><br><font color="pink">内存存放法顺序（高到低）：栈=&gt;堆=&gt;全局区=&gt;常量区=&gt;代码区</font>

<p><font color="red"><h3>变量类型</h3></font><br></p>
<p><table><tr><td bgcolor="#7FFFD4">register变量:</td></tr></table><br>使用场景:如果一个变量使用的频率很高，可以用register修饰，提高访问速度<br>–修饰限制：只有局部变量和参数可以被声明为register变量，全局变量和静态变量不可以<br>–数量限制：register修饰的变量直接存放在cpu寄存器中，资源宝贵，不可以定义太多</p>
<p><table><tr><td bgcolor="#7FFFD4">extern变量:</td></tr></table><br>&ensp;&ensp;同以外部变量只能被定义一次，声明为外部变量（就是在函数外部定义的变量），在本函数中使用。一般可以省略掉extern<br>–作用域：&ensp;&ensp;单文件：在本文件开头声明extern A，后面某行中定义int A=1；A的作用域就是本文件从开头一直到结尾。<br>多文件：在任意文件定义int A1；在本文件声明extern A，那么从当前位置到文件末尾都可以使用。<br>–存放位置：存放在全局区</p>
<p><table><tr><td bgcolor="#7FFFD4">static变量:</td></tr></table><br>&ensp;&ensp;&ensp;&ensp;静态变量，修饰符是static。（静态变量属于静态存储方式，但是属于静态存储方式的变量不一定是静态变量，比如外部变量倏然属于静态存储方式，但是不一定是静态变量，要加上static就是才能成为静态全局变量）。<br><br>&ensp;&ensp;&ensp;&ensp;局部变量经过static修饰之后就变成静态局部变量，它的生存期为整个源文件，但是作用域还是局限于本函数，只能在该函数使用，一旦退出函数，尽管变量还在，但是不能使用。<br><br>&ensp;&ensp;&ensp;&ensp;全局变量用static就是静态全局变量，原本全局变量的作用域是多个源文件，但是static修饰之后该变量值在该源文件内有效，其他源文件不能使用。<br></p>
<p><font color="red">总结</font>： 把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期；把全局变量改变为静态变量 后是改变了它的作用域， 限制了它的使用范围<br><br>&ensp;&ensp;&ensp;&ensp;当static修饰函数时，函数的作用域就限制在了本文件中</p>
<p>参考：<a href="http://blog.csdn.net/shulianghan/article/details/20472269" target="_blank" rel="external">http://blog.csdn.net/shulianghan/article/details/20472269</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h2&gt;&lt;center&gt;c语言存储空间&lt;/center&gt;&lt;/h2&gt;&lt;/p&gt;
&lt;font color=red&gt;&lt;h3&gt;内存分布&lt;/h3&gt;&lt;/font&gt;&lt;br&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#7FFFD4&gt;栈区(stack):&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;&lt;font color=#0000ff&gt;分配和释放方式：&lt;/font&gt;有编译器自动分配和释放&lt;br/&gt;&lt;br&gt;&lt;font color=#0000ff&gt;存放的内容：&lt;/font&gt;局部变量，参数&lt;br/&gt;&lt;br&gt;&lt;font color=#0000ff&gt;特点：&lt;/font&gt;后进先出，可以用于现场保护&lt;br/&gt;&lt;br&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#7FFFD4&gt;堆区(heap):&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;&lt;font color=#0000ff&gt;分配和释放方式：&lt;/font&gt;用户手动分配和释放，程序退出会自动释放&lt;br/&gt;&lt;br&gt;&lt;font color=#0000ff&gt;存放的内容：&lt;/font&gt;动态分配内存的内容&lt;br/&gt;&lt;br&gt;&lt;font color=#0000ff&gt;特点：&lt;/font&gt;可以自由划分大小，可以动态调整内存大小&lt;br/&gt;&lt;br&gt;&lt;font color=#0000ff&gt;堆内存申请：&lt;/font&gt;系统有记录空闲内存地址的链表，用户申请内存的时候就会找到空间大于用户申请内存大小的节点，所以分配的地址是随机的&lt;br/&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="c" scheme="https://simonid.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c和指针</title>
    <link href="https://simonid.github.io/2017/03/09/c%E5%92%8C%E6%8C%87%E9%92%88/"/>
    <id>https://simonid.github.io/2017/03/09/c和指针/</id>
    <published>2017-03-09T09:31:12.000Z</published>
    <updated>2017-03-09T16:12:27.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3><center>C和指针</center></h3><br>&ensp;&ensp;大一学了c语言，但是发现实际上自己对c语言的掌握程度还是不足，特别是指针部分，所以再来复习一下。<br><br>&ensp;&ensp;首先指明，指针的实质是地址，如果一个变量存储了一份数据的指针，我们就称它为指针变量。在c语言中可以用一个变量来存放指针，这个变量就是指针变量，指针变量的值就是某个数据的地址。<br><br>&ensp;&ensp;假设我们有一个int型变量a，它存储的是整型数字1，并且占用0x10b的地址，另外还有一个指针变量p，它的值是0x10b，这样我们就可以说p指向了a，或者p是指向变量a的指针<br><br><a id="more"></a><p></p>
<p><font color="#999ds">定义指针变量</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type *name;   type *name=val;</div></pre></td></tr></table></figure></p>
<p><em>表示这是一个指针变量，我们可以用</em>去获取地址上的数据，type表示该指针变量指向的数据的类型。<br><br>再举一个例子：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int a=10;</div><div class="line">int *t;</div><div class="line">int *p=&amp;a;</div><div class="line">t=&amp;a;(*t=&amp;a也是一样效果，加上*显多余，因为前面已经声明了是一个指针)</div></pre></td></tr></table></figure></p>
<p>此时，p指向a，注意p是一个指针变量，它的值应该是一个数据的地址，我们需要将变量a的地址赋予它<br>又比如：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int **p;</div><div class="line">int *a=10;</div><div class="line">*p=a;</div><div class="line">int b=9;</div><div class="line">int c=8;</div><div class="line">int *pp;</div><div class="line">*p=&amp;b;</div><div class="line">p=&amp;c;</div></pre></td></tr></table></figure></p>
<p>上面我们定义了一个二级指针，二级指针最终的指向是10，我们需要将10对应的地址（也就是a这个指针变量）赋予指针变量*p。</p>
<p>我们可以简单地总结一下指针的创建和赋值：<br>定义指针的时候必须带有<em>,让指针变量指向对应值的时候等号后面应该是一个地址。当已经定义了一个指针变量后，后面的赋值不用</em>也可以。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int x, y, *px = &amp;x, *py = &amp;y;</div><div class="line">y = *px + 5;  //表示把x的内容加5并赋给y，*px+5相当于(*px)+5</div><div class="line">y = ++*px;  //px的内容加上1之后赋给y，++*px相当于++(*px)</div><div class="line">y = *px++;  //相当于y=(*px)++</div></pre></td></tr></table></figure></p>
<p>明确概念<a href="https://www.douban.com/note/176671788/" target="_blank" rel="external">参考</a>：<br><br>&ensp;&ensp;这里分析一下静态内存，栈内存和动态分配的内存(也就是堆内存)的区别：<nr><br>&ensp;&ensp;(1) 从静态存储区域分配。在程序编译的时候内存就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量，static变量。<nr><br>&ensp;&ensp;(2) 在栈上创建。在执行函数的时侯(无论何时到达一个特殊的执行点(左花括号)时，存储单元都可以在栈上被创建。出了执行点(右花括号)，这个存储单元自动被释放)，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。<br><br>&ensp;&ensp;(3) 从堆上分配，亦称动态内存分配。程序在运行的时候用malloc或new申请任意多少的内存，程序员自己负责在何时用free或delete释放内存。动态内存的生存期由我们决定，使用非常灵活，但问题也最多。<br>字符数组和字符指针的区别：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char p[]=&quot;abc&quot;; //相当于局部变量，在堆内存存放</div><div class="line">char *p=&quot;abc&quot;;  //相当于常量，在静态内存存放</div></pre></td></tr></table></figure></nr></nr></p>
<p><font color="#999ds">指针用在参数传递</font><br><br>&ensp;&ensp;当我们在a函数定义了一对实参，然后在a函数中调用b函数（b函数中的形参来源是a函数的一对实参，并且b函数要对传入的数据进行互换），如果我们只是使用简单的变量，那么最终在a函数中不能得到互换的数据。这是因为在a函数定义局部变量的时候，实参本身会生成一份副本传入到b函数中，但是b函数在引入形参的时候实际上引用的是a函数实参的副本，在b函数中对副本进行运算之后，修改的只是副本的数据，并没有影响到实参。所以，要达到互换的目的，我们需要在函数当中引入指针的概念。<br></p>
<p><font color="red">指针参数如何传递内存?</font><br><br><a href="http://www.cnblogs.com/kaituorensheng/p/3246900.html" target="_blank" rel="external">http://www.cnblogs.com/kaituorensheng/p/3246900.html</a></p>
<p>&ensp;&ensp;如果函数的参数是一个指针，不要指望用该指针去申请动态内存。比如下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">void GetMemory(char *p, int num)</div><div class="line">&#123;</div><div class="line">    p = (char *)malloc(sizeof(char) * num);</div><div class="line">&#125;</div><div class="line">void Test(void)</div><div class="line">&#123;</div><div class="line">    char *str = NULL;</div><div class="line">    GetMemory(str, 100);    // str 仍然为 NULL </div><div class="line">    strcpy(str, &quot;hello&quot;);   // 运行错误</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&ensp;&ensp;Test函数的语句GetMemory(str,200)并没有使得str获得期望的内存，str依然是NULL，why？<br>问题就在GetMemory函数上。编译器总是要为每个参数制作临时副本，指针参数p的副本设做_p，编译器是_p=p，如果函数体内（就是动态分配内存）的程序修改了_p的内容，就会导致参数p的内容作相应的修改，这就是指针可以作为输出参数的原因。在这里，_p申请了新内存，只是把_p所指向的内存地址改变了，但是p还是没有改动，所以GetMemory不能输出任何东西，而且这样很容易造成内存泄漏。<br><img src="http://i1.piimg.com/567571/7a5d7b5f32167a50.png" alt="image1"><br>开始的时候和_p都是指向同一块内存，当修改地址1的内容时，实际上也就是修改了p所指向的内存的内容，这和我们平常使用指针参数的情况是一样的。然而当我们修改_p的值时（为它分配动态内存），只是将_p指向另外一地址（地址2），而p还是指向地址1，相当于值传递，无法改变变量内容。<br>如果要用指针传递内存，我们要引用二级指针<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void GetMemory2(char **p, int num)</div><div class="line">&#123;</div><div class="line">    *p = (char *)malloc(sizeof(char) * num);</div><div class="line">&#125;</div><div class="line">void Test2(void)</div><div class="line">&#123;</div><div class="line">    char *str = NULL;</div><div class="line">    GetMemory2(&amp;str, 100);  // 注意参数是 &amp;str，而不是str</div><div class="line">    strcpy(str, &quot;hello&quot;);  </div><div class="line">    cout&lt;&lt; str &lt;&lt; endl;</div><div class="line">    free(str); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://p1.bqimg.com/567571/c62d8a1b83fda05b.png" alt="image2"></p>
<p><font color="red">sizeof和指针</font><br><br>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">char str[]=&quot;abcd&quot;，sizeof(str)==5,str类型是char[5];</div><div class="line">sizeof(&quot;abcd&quot;)==5，因为&quot;abcd&quot;的类型是const char[5]；</div><div class="line">char str[10]=&quot;abcd&quot;，sizeof(str)==10，此时str类型是char[10];</div><div class="line">void func(char a[10],int b[20],char *p)，</div><div class="line">sizeof(a)==sizeof(b)==sizeof(p)==4，因为a的类型是char*,b的类型是int*,p的类型是char*。</div></pre></td></tr></table></figure></p>
<p><font color="red">另外我们提一下出现频率很高的const指针</font><br><br>首先先明确，const限定符修饰的变量只能被读<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const  int a=2;</div><div class="line">int b=3;</div><div class="line">a=b;  //非法</div><div class="line">b=a;   //合法</div><div class="line">extern const i;  //合法</div><div class="line">extern const int j=2;//非法，不能再次赋值</div></pre></td></tr></table></figure></p>
<p>但是，我们还是有途径修改const定义的常量的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const int i=0;</div><div class="line">int *p=(int*)&amp;i;</div><div class="line">i=10;  //通过强制类型转换，把地址赋给变量，再次修改就可以改变const常量值</div></pre></td></tr></table></figure></p>
<p>const char <em>p/char const </em>p：这个时候const用来修饰指针所指向的变量，即指针指向的内容为常量，不能修改其内容，但是可以修改其指向（地址）。当用户想要传入一个指针参数给一个外部函数时，又不想外部函数对这个参数的修改会影响到本身作用域里原先的值，而且又要让外部函数能够对这个传入的参数进行修改用在自身，那么就要引入这个概念，实际上，我们的strcpy函数原型中有一个参数就是这种格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const char *t=0;</div><div class="line">*t=1; //非法</div><div class="line">t++; //合法</div><div class="line">char *p;</div><div class="line">const char *pp=p;  //正确</div><div class="line">char **pa;</div><div class="line">const char **pt=pa;  //错误，无法从char **转换为const char **</div></pre></td></tr></table></figure></p>
<p>char *const p:这时候const修饰指针本身，指针是常量，不能修改其指向，但是可以修改其内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">char* const p=0;</div><div class="line">*p=1;  //合法</div><div class="line">p++;  //非法</div></pre></td></tr></table></figure></p>
<p>如果要设置指向和内容都不能改写，类似这样char const * const a;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//const char ** 的赋值过程  </div><div class="line">const char c1=&apos;x&apos;;  </div><div class="line">const char * p0=&amp;c1;  </div><div class="line">const char ** p1=&amp;p0;  </div><div class="line">// char ** 的赋值过程  </div><div class="line">char c2=&apos;y&apos;;  </div><div class="line">char * p2=&amp;c2;  </div><div class="line">char ** p3=&amp;p2;  </div><div class="line">char * const * p4=p3;// 注意：char * const * 就是char ** 的赋值兼容类型</div></pre></td></tr></table></figure>
<p><font color="#9032ds">形参中引用指针和引用数组</font><br><br>&ensp;&ensp;实际上，在形参中定义数组和定义指针的效果是一样的，数组作为参数传递的时候会被弱化为指针，传递进去的是数组的首元素地址</p>
<p><font color="0000ff">void <code>*</code></font><br><br>void<em>是通用指针类型，即指向void的指针，可以指向任意类型的地址。如果函数的参数和返回值可以是任意类型，就可以用void</em>作为参数或返回值。<br></p>
<p><font color="red">注意：</font><br><br>void<em>和其他类型不能相互复制，比如int</em>变量可以复制给void<em>变量，但是void</em>变量要赋值给int<em>变量就要强制转换为int</em>类型。<br>void<em>类型不能进行加减乘除运算。<br>GNU中void</em>等价与char*</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h3&gt;&lt;center&gt;C和指针&lt;/center&gt;&lt;/h3&gt;&lt;br&gt;&amp;ensp;&amp;ensp;大一学了c语言，但是发现实际上自己对c语言的掌握程度还是不足，特别是指针部分，所以再来复习一下。&lt;br/&gt;&lt;br&gt;&amp;ensp;&amp;ensp;首先指明，指针的实质是地址，如果一个变量存储了一份数据的指针，我们就称它为指针变量。在c语言中可以用一个变量来存放指针，这个变量就是指针变量，指针变量的值就是某个数据的地址。&lt;br/&gt;&lt;br&gt;&amp;ensp;&amp;ensp;假设我们有一个int型变量a，它存储的是整型数字1，并且占用0x10b的地址，另外还有一个指针变量p，它的值是0x10b，这样我们就可以说p指向了a，或者p是指向变量a的指针&lt;br/&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="c" scheme="https://simonid.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>了解hexo主题的布局</title>
    <link href="https://simonid.github.io/2017/03/09/%E4%BA%86%E8%A7%A3hexo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%B8%83%E5%B1%80/"/>
    <id>https://simonid.github.io/2017/03/09/了解hexo主题的布局/</id>
    <published>2017-03-09T01:09:47.000Z</published>
    <updated>2017-03-09T06:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3><center>了解hexo主题的布局</center></h3><br>很棒的一本小书：<a href="https://pengloo53.gitbooks.io/hexo/content/" target="_blank" rel="external">https://pengloo53.gitbooks.io/hexo/content/</a><br><br>&ensp;&ensp;&ensp;hexo的主题在theme目录下，以本人使用的yilia主题来说，它的一个基本内容是这样的：<p></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">yilia/</div><div class="line">├── _config.yml</div><div class="line">├── languages/</div><div class="line">├── source/</div><div class="line">└── layout/</div><div class="line">    ├── _partial/</div><div class="line">    ├── _widget/</div><div class="line">    ├── archive.ejs</div><div class="line">    ├── category.ejs</div><div class="line">    ├── index.ejs</div><div class="line">    ├── layout.ejs</div><div class="line">    ├── page.ejs</div><div class="line">    ├── post.ejs</div><div class="line">    └── tag.ejs</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><font size="4" color="#89qawh">文件夹的解释：</font><br></p>
<p><font size="4" color="#89dasjk">language</font><br>语言文件夹<br></p>
<p><font size="4" color="#89dasjk">layout</font><br>布局文件夹，hexo默认使用swig模板引擎，用户可以安装插件来获取EJS、Haml或Jade支持，hexo根据模板文件的扩展名来决定所使用的模板引擎，比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">layout.ejs  --使用EJS</div><div class="line">layout.swig --使用swig</div></pre></td></tr></table></figure>
<p><font size="4" color="#89dasjk">source</font><br>资源文件夹，除了模板之外的文件，比如css、js都应该放在这里。如果文件或文件夹的名称以_开头或.隐藏文件就会被忽略。如果文件可以被渲染，会经过解析然后存到public目录，否则直接拷贝到public</p>
<p><font size="4" color="#89dasjk">_partial</font><br>局部模板目录，局部模板的设计可以让你在不同模板之间进行分享，比如你的header、footer等等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">partial/header.ejs</div><div class="line">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= config.title %&gt;&lt;/h1&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">index.ejs</div><div class="line">&lt;%- partial(&apos;_partial/header.ejs&apos;,&#123;config.title:&apos;Hello&apos;&#125;) %&gt;</div><div class="line">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>最后生成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;h1 id=&quot;logo&quot;&gt;Hello&lt;/h1&gt;</div><div class="line">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>前面的配置还引入了局部变量的概念,局部变量就是config.title</p>
<h4>默认布局</h4><br>layout.ejs是hexo的默认布局模板文件，里面的内容：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;%- partial(&apos;_partial/head&apos;) %&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">  &lt;div id=&quot;container&quot;&gt;</div><div class="line">    &lt;div class=&quot;left-col&quot;&gt;</div><div class="line">    &lt;%- partial(&apos;_partial/left-col&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;mid-col&quot;&gt;</div><div class="line">      &lt;%- partial(&apos;_partial/mobile-nav&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;</div><div class="line">          &lt;!--是否开启最近通知--&gt;</div><div class="line">          &lt;% if(theme.recent)&#123;%&gt;</div><div class="line">          &lt;%- partial(&apos;_partial/recent&apos;,null,&#123;cache: !config.relative_link&#125;) %&gt;</div><div class="line">          &lt;% &#125; %&gt;</div><div class="line">      &lt;div class=&quot;body-wrap&quot;&gt;&lt;%- body %&gt;&lt;/div&gt;</div><div class="line">      &lt;!--&lt;%- partial(&apos;_partial/footer&apos;) %&gt;--&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;%- partial(&apos;_partial/after-footer&apos;) %&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><br><br>&ensp;&ensp;可以看到文件里面包含了许多其他模板，其中很多是来自_partial目录下的，这说明了layout.ejs就是一个完整的页面。<br>&ensp;&ensp;每个hexo站点基本可以分为<font color="#0000ff">index(首页)</font>、<font color="#0000ff">post（文章详细页）</font>、<font color="#0000ff">page（导航标签页）</font>、<font color="#0000ff">archive（归档页）</font>、<font color="#0000ff">category（类别页）</font>还有<font color="#0000ff">tag（标签页）</font>，它们都可以在layout.ejs找到对应文件。它们的每一个都是一种布局，用以替换掉前面layout.ejs文件中的<font color="#0000ff">&lt;%- body%&gt;</font>。<br>随便打开其中的一些文件，比如category.ejs和archive.ejs：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">category:</div><div class="line">&lt;%- partial(&apos;_partial/archive&apos;, &#123;pagination: config.category, index: true&#125;) %&gt;</div><div class="line"></div><div class="line">archive:</div><div class="line">&lt;%- partial(&apos;_partial/archive&apos;, &#123;pagination: config.category, index: true&#125;) %&gt;</div></pre></td></tr></table></figure><br><br>对比起来没有任何区别，都使用_partial/archive局部模块。<br><br><h4>首页布局</h4>


<p>参考：<br><a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="external">hexo官方文档</a><br><a href="http://www.codeblocq.com/2016/03/Create-an-Hexo-Theme-Part-1-Index/" target="_blank" rel="external">Create an Hexo Theme - Part 1: Index</a><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h3&gt;&lt;center&gt;了解hexo主题的布局&lt;/center&gt;&lt;/h3&gt;&lt;br&gt;很棒的一本小书：&lt;a href=&quot;https://pengloo53.gitbooks.io/hexo/content/&quot;&gt;https://pengloo53.gitbooks.io/hexo/content/&lt;/a&gt;&lt;br/&gt;&lt;br&gt;&amp;ensp;&amp;ensp;&amp;ensp;hexo的主题在theme目录下，以本人使用的yilia主题来说，它的一个基本内容是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yilia/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── _config.yml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── languages/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── source/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── layout/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── _partial/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── _widget/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── archive.ejs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── category.ejs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── index.ejs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── layout.ejs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── page.ejs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── post.ejs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    └── tag.ejs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="博客" scheme="https://simonid.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://simonid.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://simonid.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="theme" scheme="https://simonid.github.io/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>Text开发环境搭建</title>
    <link href="https://simonid.github.io/2017/03/08/Sublime%20Text%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://simonid.github.io/2017/03/08/Sublime Text开发环境搭建/</id>
    <published>2017-03-08T12:36:25.000Z</published>
    <updated>2017-03-08T14:44:02.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3><center>Sublime Text开发环境搭建</center></h3><br>&nbsp;&nbsp;&emsp;Sublime text是一个很强的跨平台编辑器，如果你只认为它和普通编辑器一样那就误解了，实际上，它有很多丰富的插件，我们可以通过拓展插件的方法来搭建一个非常完备的开发环境。甚至，很多时候，它可以替代IDE的很多工作（好多IDE真的是内存杀手，尽管它们有很多功能）。<br><br><br>官网：<a href="http://www.sublimetext.com/" target="_blank" rel="external">http://www.sublimetext.com/</a><br><br>&nbsp;&nbsp;&emsp;安装插件之前，我们要先安装package control包管理器：<br>依次点开<b>view-&gt;show control</b>(快捷键 Ctrl+`),在控制台下输入:<br><br><br><a id="more"></a><p></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h =                           &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package          Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</div></pre></td></tr></table></figure>
<p>可以参考：<a href="https://packagecontrol.io/installation" target="_blank" rel="external">https://packagecontrol.io/installation</a><br><br>安装完插件管理之后，通过菜单 <strong>Preferences&gt; Package Control （快捷键 Ctrl+Shift+P） </strong>来开启安装插件，在打开的输入框中输入<strong>install</strong> ，从提示的待选项中选择<strong> Install Package</strong>。<br>这里提一下，本人在ubuntu14.04上安装sublime text3插件的时候，当进行到install package那个步骤的时候，系统提示了错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Package Control</div><div class="line"></div><div class="line">There are no packages available for installation</div><div class="line"></div><div class="line">Please see https://packagecontrol.io/docs/troubleshooting for help</div></pre></td></tr></table></figure>
<p>网络出现了问题。。。<br>解决：<br>1.在终端输入：<font color="#d2691e">dig @8.8.8.8 -t A sublime.wbond.net +noall +answer</font><br><br>然后找到类似下面的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">; &lt;&lt;&gt;&gt; DiG 9.9.5-3-Ubuntu &lt;&lt;&gt;&gt; @8.8.8.8 -t A sublime.wbond.net +noall +answer</div><div class="line">; (1 server found)</div><div class="line">;; global options: +cmd</div><div class="line">sublime.wbond.net.  82  IN  A 50.116.34.243</div></pre></td></tr></table></figure>
<p>2.后面的数字就是你需要改的host，在/etc/hosts下，填入：<br></p>
<p><font color="#d2691e">50.116.34.243 sublime.wbond.net</font><br><br>原文：<a href="http://stackoverflow.com/questions/25105139/sublime-text-2-there-are-no-packages-available-for-installation" target="_blank" rel="external">http://stackoverflow.com/questions/25105139/sublime-text-2-there-are-no-packages-available-for-installation</a><br><br>安装完毕之后可以根据Package Control Messages这个文件查看插件信息。<br>当然你也可以删除插件，在前面提到的package control中输入<b>remove package</b>，选择要删除的插件<br><br><br></p>
<p><font size="4" color="#8b008b"><b>前端的插件</b></font><br></p>
<p><font color="#0000ff">Tag:</font>Html/xml代码格式化 <br></p>
<p><font color="#0000ff">CSScomb:</font>CSS属性排序 <br></p>
<p><font color="#0000ff">JsFormat:</font>JS代码格式化 <br></p>
<p><font color="#0000ff">Emmet：</font>快速生成HTML代码段的插件 <br></p>
<p><font color="#0000ff">jQuery:</font> 智能提示jQuery代码<br></p>
<p><font color="#0000ff">HTML5:</font>HTML5 bundle <br></p>
<p><font color="#0000ff">Js​Format: </font>JS代码格式化<br></p>
<p><hr></p>
<p><font size="4" color="#8b008b"><b>PHP的插件</b></font><br></p>
<p><font color="#0000ff">sublimelinter + sublimelinter-php:</font>PHP代码语法检测，在写的时候就可以知道是否符合PHP语法，及时修改 <br></p>
<p><font color="#0000ff">SublimeCodeIntel:</font> PHP代码自动补全工具<br></p>
<p><font color="#0000ff">Xdebug Client：</font>调试插件，可以对PHP代码设置断点、单步、步入、步出、步进等调试，以及查看实时变量值 <br></p>
<p><font color="#0000ff">DocBlockr：</font> 可以自动生成PHPDoc风格的注释<br></p>
<p><hr></p>
<p><font size="4" color="#8b008b"><b>C/C++的插件</b></font><br></p>
<p><hr></p>
<p><font size="4" color="#8b008b"><b>Python的插件</b></font><br></p>
<p><hr></p>
<p><font size="4" color="#8b008b"><b>其他的插件</b></font><br></p>
<p><font color="#0000ff">Alignment:</font>代码对齐 <br></p>
<p><font color="#0000ff">Bracket​Highlighter:</font>括号高亮<br></p>
<p><font color="#0000ff">ConvertToUTF8:</font>：支持Sublime打开 GBK, BIG5, EUC-KR, EUC-JP, Shift_JIS 等编码文件的插件<br></p>
<p><font color="#0000ff">Bracket Highlighter</font>：用于匹配括号，引号和html标签。对于很长的代码很有用<br></p>
<p><font color="#0000ff">SideBar Enhancements:</font>这个插件改进了侧边栏，增加了许多侧边栏的右键功能<br></p>
<p><font color="#0000ff">Themr：</font>主题管理，切换主题的时候，不用自己修改配置文件了，用这个可以方便的切换主题 <br></p>
<p><font color="#0000ff">SFTP:</font> ftp插件<br></p>
<p><font color="#0000ff">GBK to UTF8:</font>GBK转换为UTF8 <br></p>
<p><font color="#0000ff">Clipboard History:</font>剪切板历史记录<br></p>
<p><font color="#0000ff">Git:</font>整合git<br></p>
<p><font color="#0000ff">Sublimall:</font>同步其他设备的ST<br></p>
<p><font color="#0000ff">AutoFileName:</font>补全文件路径<br></p>
<p><font color="#0000ff"></font> <br></p>
<p><font color="#0000ff"></font> <br></p>
<p><font color="#0000ff"></font> <br></p>
<p><font color="#0000ff"></font> <br></p>
<p><font color="#0000ff"></font> <br></p>
<p><font color="#0000ff"></font> <br></p>
<p>参考牛人的经验：<br><a href="https://github.com/jikeytang/sublime-text" target="_blank" rel="external">https://github.com/jikeytang/sublime-text</a><br><br><a href="http://www.awaimai.com/940.html" target="_blank" rel="external">http://www.awaimai.com/940.html</a><br><br><a href="https://segmentfault.com/a/1190000000382934" target="_blank" rel="external">https://segmentfault.com/a/1190000000382934</a><br><br><a href="http://blog.jobbole.com/79326/" target="_blank" rel="external">http://blog.jobbole.com/79326/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h3&gt;&lt;center&gt;Sublime Text开发环境搭建&lt;/center&gt;&lt;/h3&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;emsp;Sublime text是一个很强的跨平台编辑器，如果你只认为它和普通编辑器一样那就误解了，实际上，它有很多丰富的插件，我们可以通过拓展插件的方法来搭建一个非常完备的开发环境。甚至，很多时候，它可以替代IDE的很多工作（好多IDE真的是内存杀手，尽管它们有很多功能）。&lt;br/&gt;&lt;br/&gt;&lt;br&gt;官网：&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;http://www.sublimetext.com/&lt;/a&gt;&lt;br/&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;emsp;安装插件之前，我们要先安装package control包管理器：&lt;br&gt;依次点开&lt;b&gt;view-&amp;gt;show control&lt;/b&gt;(快捷键 Ctrl+`),在控制台下输入:&lt;br/&gt;&lt;br/&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tool" scheme="https://simonid.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>HEXO主题定制</title>
    <link href="https://simonid.github.io/2017/03/08/HEXO%E4%B8%BB%E9%A2%98%E5%AE%9A%E5%88%B6/"/>
    <id>https://simonid.github.io/2017/03/08/HEXO主题定制/</id>
    <published>2017-03-08T11:06:40.000Z</published>
    <updated>2017-03-08T16:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2><center>hexo主题定制</center></h2><p></p>
<p><hr></p>
<p><font size="3"><em><b>后续也会更新…</b></em></font></p>
<p><hr><br><br><br>其实也就是在网上找的一些定制hexo主题的链接，废话不多说，直接放出来：<br><br>通过这篇文章先大致了解Hexo的布局<a href="http://www.ituring.com.cn/article/199325" target="_blank" rel="external">初步了解Hexo站点布局</a><br><br><br><br>Landscape主题定制：<br><br><a href="http://blog.sunnyxx.com/2014/03/07/hexo_customize/" target="_blank" rel="external"><font size="4" color="#8B008B">hexo私人定制</font></a><br><br><a href="http://hialex.cn/2014/05/18/%E5%AE%9A%E5%88%B6%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E4%B8%BB%E9%A2%98/" target="_blank" rel="external"><font size="4" color="#8b008b">定制自己的hexo主题</font></a><br><br><a href="http://www.codertian.com/2016/03/14/change-landscape-theme-by-yourself/" target="_blank" rel="external"><font size="4" color="#8b008b">【实用技能】教你定制Hexo的landscape打造自己的主题</font></a><br><a id="more"></a><br><a href="http://hanhailong.com/2015/09/17/Hexo%E4%B8%BB%E9%A2%98-%E5%9C%A8%E5%8D%9A%E5%AE%A2%E5%B7%A6%E4%B8%8A%E8%A7%92%E6%B7%BB%E5%8A%A0ForkMeOnGithub%E5%8A%9F%E8%83%BD/" target="_blank" rel="external"><font size="4" color="#8b008b">Hexo主题-在博客左上角添加ForkMeOnGithub功能</font></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h2&gt;&lt;center&gt;hexo主题定制&lt;/center&gt;&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=3&gt;&lt;em&gt;&lt;b&gt;后续也会更新…&lt;/b&gt;&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr/&gt;&lt;br&gt;&lt;br/&gt;&lt;br&gt;其实也就是在网上找的一些定制hexo主题的链接，废话不多说，直接放出来：&lt;br/&gt;&lt;br&gt;通过这篇文章先大致了解Hexo的布局&lt;a href=&quot;http://www.ituring.com.cn/article/199325&quot;&gt;初步了解Hexo站点布局&lt;/a&gt;&lt;br/&gt;&lt;br&gt;&lt;br/&gt;&lt;br&gt;Landscape主题定制：&lt;br/&gt;&lt;br&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2014/03/07/hexo_customize/&quot;&gt;&lt;font size=4 color=#8B008B&gt;hexo私人定制&lt;/font&gt;&lt;/a&gt;&lt;br/&gt;&lt;br&gt;&lt;a href=&quot;http://hialex.cn/2014/05/18/%E5%AE%9A%E5%88%B6%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E4%B8%BB%E9%A2%98/&quot;&gt;&lt;font size=4 color=#8b008b&gt;定制自己的hexo主题&lt;/font&gt;&lt;/a&gt;&lt;br&gt;&lt;/br/&gt;&lt;br&gt;&lt;a href=&quot;http://www.codertian.com/2016/03/14/change-landscape-theme-by-yourself/&quot;&gt;&lt;font size=4 color=#8b008b&gt;【实用技能】教你定制Hexo的landscape打造自己的主题&lt;/font&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="https://simonid.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://simonid.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://simonid.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>分析openwrt内部交换机设置</title>
    <link href="https://simonid.github.io/2017/01/18/%E5%88%86%E6%9E%90openwrt%E5%86%85%E9%83%A8%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE/"/>
    <id>https://simonid.github.io/2017/01/18/分析openwrt内部交换机设置/</id>
    <published>2017-01-18T05:52:55.000Z</published>
    <updated>2017-01-18T17:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><cneter><h2>分析openwrt内部交换机设置</h2><br>先放出一张openwrt内部的网络结构图：<br><img src="http://www.wuweixin.com/wp-content/uploads/2015/12/003dXSUazy6Lmn4r2tzb9690.png" alt="openwrt"><br>上述路由是MT7620芯片<br><br></cneter></p>
<p><font color="#0000ff"><strong><br>eth0（LAN）  eth1（WAN）
</strong></font><br><br><br>路由可分成两部分，一个是路由部分，另外一个是交换机部分。一个交换机可分成6个端口，其中5个是用户可视，如上面的Port0-4，不可视的是Port5，和路由器的eth0相连。所以，家用路由多数是5口。<br>路由器上的wan和lan口其实都是一个交换机上的不同端口而已，用户可以通过VLAN技术来划分wan和lan的数目和位置，通过VLAN设置，可以对交换机进行端口隔离，抑制广播风暴。<br>通过VLAN划分，可以使eth0区分不同端口的数据包，在路由上建立起虚拟接口eth0，eth0.1，通过控制两个虚拟接口</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;cneter&gt;&lt;h2&gt;分析openwrt内部交换机设置&lt;/h2&gt;&lt;br&gt;先放出一张openwrt内部的网络结构图：&lt;br&gt;&lt;img src=&quot;http://www.wuweixin.com/wp-content/uploads/2015/12/003dXSUazy6Lmn
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Use_MarkDown</title>
    <link href="https://simonid.github.io/2017/01/17/Use-MarkDown/"/>
    <id>https://simonid.github.io/2017/01/17/Use-MarkDown/</id>
    <published>2017-01-17T08:55:55.000Z</published>
    <updated>2017-03-08T05:22:57.000Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="黑体" color="#8B008B"><strong><strong></strong></strong></font><br><font size="3" face="黑体" color="#8B008B"></font>

<center><h1>MarkDown常用技巧</h1></center><br>可参考:<br><br><a href="http://www.markdown.cn/" target="_blank" rel="external"><font size="4">markdown中文网</font></a><br><br><a href="https://www.zhihu.com/question/19963642" target="_blank" rel="external">知乎：markdown是什么</a><br><br><br><a href="http://blog.csdn.net/column/details/markdown.html" target="_blank" rel="external">CSDN markdown专栏</a><br><strong><em>
</em></strong><br>MarkDown作者Aaron Swartz:<br><br><br><center>![MarkDown作者] (“<a href="https://pic4.zhimg.com/606e14127233ca0a935032b19b5df3a7_b.jpg" target="_blank" rel="external">https://pic4.zhimg.com/606e14127233ca0a935032b19b5df3a7_b.jpg</a>“)</center>

<p><a href="http://www.rememberaaronsw.com/memories/" target="_blank" rel="external">纪念斯沃茨的网站(markdown编写)</a></p>
<p>###标题<br>标题共有6级，用<strong><font size="4" face="黑体" color="#8B008B">#</font></strong>表示，后面接内容，<strong><font size="4" face="黑体" color="#8B008B">#</font></strong>越多代表级别越高，尺寸越小</p>
<p>###加粗，斜体<br>在需要加粗的文字两端加入<strong><font size="3" face="黑体" color="#8B008B">`</font></strong>加粗文字<strong>`</strong><br>或者<font size="3" face="黑体" color="#8B008B"><strong><code>_加粗文字_</code></strong></font><br>如果要输出斜体效果，那么就是单个的<font size="4" face="黑体" color="#8B008B"><strong><code>*</code></strong></font>或者是单个的<font size="4" face="黑体" color="#8B008B"><strong><code>_</code></strong></font><br>而且，加粗和斜体标识最好都是放在<font size="4" face="黑体" color="#8B008B"><strong><code>&lt;font&gt;</code></strong></font>内<br><a id="more"></a></p>
<p>###使排版更有层次<br>比如你需要下面的结果<br><br>1. 第一节</p>
<ul>
<li>第二节(你不用敲 “2”，自动就有了）<ul>
<li>第一小节（推荐每层次缩进四个空格）<ul>
<li>小小节 1</li>
<li>小小节 2</li>
</ul>
</li>
<li>第二小节</li>
</ul>
</li>
</ul>
<p>那么就像下面那样输入：<br></p>
<ol>
<li>第一节</li>
</ol>
<ul>
<li>第二节(你不用敲 “2”，自动就有了）`<ul>
<li>第一小节（推荐每层次缩进四个空格）<ul>
<li>小小节 1</li>
<li>小小节 2</li>
</ul>
</li>
<li>第二小节</li>
</ul>
</li>
</ul>
<p><br><br>换行后的<strong><font size="4" face="黑体" color="#8B008B">*</font></strong>和前面持平的一行的一个元素效果相同，比如第一行的1.。第二行如果缩进与第一行持平，那么保持这种结构持续下去显示2.。假如要和前面的效果不同，那么就输入一个<strong><font size="3" face="黑体" color="#8B008B">tab</font></strong>不和前面持平<br><br>更好的方法：</p>
<font size="4" face="黑体" color="#8B008B"><strong><br><code>&lt;ol&gt;</code><br><br><code>&lt;li&gt;</code>有序列表第一项<code>&lt;/li&gt;</code><br><br><code>&lt;li&gt;</code>有序列表第二项<code>&lt;/li&gt;</code><br><br><code>&lt;li&gt;</code>有序列表第三项<code>&lt;/li&gt;</code><br><br><code>&lt;/ol&gt;</code><br><br><code>&lt;ul&gt;</code>
</strong></font><br><br>输出效果：<br><ol><br><li>有序列表第一项</li><br><li>有序列表第二项</li><br><li>有序列表第三项</li><br></ol><br>又比如：<br><font size="4" face="黑体" color="#8B008B"><strong><br><br><code>&lt;li&gt;&lt;p&gt;这是一个列表项&lt;/p&gt;</code><br><br><code>&lt;p&gt;这是第一列表项中的第二个段落&lt;/p&gt;&lt;/li&gt;</code><br><br><code>&lt;li&gt;&lt;p&gt;这是列表的另一个项&lt;/p&gt;&lt;/li&gt;</code><br><br><code>&lt;/ul&gt;</code>
</strong></font><br><br><br>输出效果：<br><ul><br><li><p>这是一个列表项</p><br><p>这是第一列表项中的第二个段落</p></li><br><li><p>这是列表的另一个项目</p></li><br></ul><br><br>###居中:<br>用<strong><font size="4" face="黑体" color="#8B008B"><code>&lt;center&gt;</code></font></strong>标签扩起来<br>###换行：<br>&emsp;方法1：连续两个以上空格+回车<br><br>&emsp;方法2：使用html语言换行标签:<strong><font size="4" face="黑体" color="#8B008B"><code>&lt;br&gt;</code></font> </strong>（假如要输出<strong><font size="4" face="黑体" color="#8B008B"><code>&lt;br&gt;</code></font> </strong>这样的文字，那么在左右用<code>`` </code>扩起来）<br><br><font size="4" face="黑体" color="#8B008B"><strong><code>&lt;br&gt;</code></strong></font> 符号要在行首输入<br><br><br>####首行缩进两个字符：(每个表示一个空格，连续使用两个)<br>半方大的空白<font size="4" face="黑体" color="#8B008B"><strong><code>&amp;ensp;</code></strong></font>或<font size="4" face="黑体" color="#8B008B"><strong><code>&amp;#8194;</code></strong></font><br><br><br>全方大的空白<font size="4" face="黑体" color="#8B008B"><strong><code>&amp;emsp;</code></strong></font>或<font size="4" face="黑体" color="#8B008B"><strong><code>&amp;#8195;</code></strong></font><br><br><br>不断行的空白格<font size="4" face="黑体" color="#8B008B"><strong><code>&amp;nbsp;</code></strong></font>或<font size="4" face="黑体" color="#8B008B"><strong><code>&amp;#160;</code></strong></font>

<p>###字体颜色、大小、字型</p>
<p><code>&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</code> <br><br><code>&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</code><br><br><code>&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</code><br><br><code>&lt;font color=#0099ff size=7 face=&quot;黑体&quot;&gt;color=#0099ff size=72 face=&quot;黑体&quot;&lt;/font&gt;</code><br><br><code>&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;</code><br><br><code>&lt;font color=gray size=72&gt;color=gray&lt;/font&gt;</code></p>
<p><td><table><tr><td bgcolor="AliceBlue">也可以把颜色代号换成颜色名称</td></tr></table><br><br></td></p>
<p><font color="#000099">字体效果：</font><br><br><font face="黑体">我是黑体</font><br><br><font face="微软雅黑">我是微软雅黑</font><br><br><font face="华文彩云">我是华文彩云</font><br><br></p>
<p>###背景颜色：<br><strong><font size="4" face="黑体" color="#8B008B"><code>&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=Chartreuse&gt;Chartreuse&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></font></strong><br><br></p>
<p><td><table><tr><td bgcolor="AliceBlue">也可以把颜色名称换成颜色代号</td></tr></table><br><br></td></p>
<p><font color="#00099">颜色效果：</font></p>
<hr>
<p><br><table class="table table-bordered table-striped table-condensed"><br> <tr><br>    <td><font color="#F0F8FF"><code>#F0F8FF</code></font></td><br>    <td><font color="#FAEBD7"><code>#FAEBD7</code></font></td><br>    <td><font color="#00FFFF"><code>#00FFFF</code></font></td><br>    <td><font color="#7FFFD4"><code>#7FFFD4</code></font></td><br>    <td><font color="#F0FFFF"><code>#F0FFFF</code></font></td><br>    <td><font color="#F5F5DC"><code>#F5F5DC</code></font></td><br>    <td><font color="#FFE4C4"><code>#FFE4C4</code></font></td><br>    <td><font color="#FFEBCD"><code>#FFEBCD</code></font></td><br>    <td><font color="#0000FF"><code>#0000FF</code></font></td><br>    <td><font color="#8A2BE2"><code>#8A2BE2</code></font></td><br>    <td><font color="#A52A2A"><code>#A52A2A</code></font></td><br> </tr><br> <tr><br>    <td><table><tr><td bgcolor="AliceBlue">AliceBlue</td></tr></table><br>    </td><td><table><tr><td bgcolor="AntiqueWhite">AntiqueWhite</td></tr></table><br>    </td><td><table><tr><td bgcolor="Aqua">Aqua</td></tr></table><br>    </td><td><table><tr><td bgcolor="Aquamarine">Aquamarine</td></tr></table><br>    </td><td><table><tr><td bgcolor="Azure">Azure</td></tr></table><br>    </td><td><table><tr><td bgcolor="Beige">Beige</td></tr></table><br>    </td><td><table><tr><td bgcolor="Bisque">Bisque</td></tr></table><br>    </td><td><table><tr><td bgcolor="BlanchedAlmond">BlanchedAlmond</td></tr></table><br>    </td><td><table><tr><td bgcolor="Blue">Blue</td></tr></table><br>    </td><td><table><tr><td bgcolor="BlueViolet">BlueViolet</td></tr></table><br>    </td><td><table><tr><td bgcolor="Brown">Brown</td></tr></table><br></td></tr></table></p>
<p><tr><br>    <td><font color="#DEB887"><code>#DEB887</code></font></td><br>    <td><font color="#5F9EA0"><code>#5F9EA0</code></font></td><br>    <td><font color="#7FFF00"><code>#7FFF00</code></font></td><br>    <td><font color="#D2691E"><code>#D2691E</code></font></td><br>    <td><font color="#FF7F50"><code>#FF7F50</code></font></td><br>    <td><font color="#6495ED"><code>#6495ED</code></font></td><br>    <td><font color="#FFF8DC"><code>#FFF8DC</code></font></td><br>    <td><font color="#DC143C"><code>#DC143C</code></font></td><br>    <td><font color="#00FFFF"><code>#00FFFF</code></font></td><br>    <td><font color="#00008B"><code>#00008B</code></font></td><br>    <td><font color="#008B8B"><code>#008B8B</code></font></td><br> </tr><br> <tr><br>    <td><table><tr><td bgcolor="BurlyWood">BurlyWood</td></tr></table><br>    </td><td><table><tr><td bgcolor="CadetBlue">CadetBlue</td></tr></table><br>    </td><td><table><tr><td bgcolor="Chartreuse">Chartreuse</td></tr></table><br>    </td><td><table><tr><td bgcolor="Chocolate">Chocolate</td></tr></table><br>    </td><td><table><tr><td bgcolor="Coral">Coral</td></tr></table><br>    </td><td><table><tr><td bgcolor="CornflowerBlue">CornflowerBlue</td></tr></table><br>    </td><td><table><tr><td bgcolor="Cornsilk">Cornsilk</td></tr></table><br>    </td><td><table><tr><td bgcolor="Crimson">Crimson</td></tr></table><br>    </td><td><table><tr><td bgcolor="Cyan">Cyan</td></tr></table><br>    </td><td><table><tr><td bgcolor="DarkBlue">DarkBlue</td></tr></table><br>    </td><td><table><tr><td bgcolor="DarkCyan">DarkCyan</td></tr></table><br></td></tr><br></p>
<hr>
<p><br>假如要在<code>`` </code>扩起来的字符当中输入内嵌符号而且不要转义，还是要用<code>`` </code>扩起来<br>一般情况下，当<code>`` </code>成对出现的时候，要在反引号两边在加一对反引号，并且外边的要和里面的保持一个空格<br></p>
<p>###代码区块<br>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：<br><br>void main()<br><br>{<br><br>printf(“Hello, Markdown.”);<br><br>}</p>
<pre><code>void main()
{
    printf(&quot;Hello, Markdown.&quot;);
} 
</code></pre><p>也可以用<font size="6" face="黑体" color="#8B008B">**` <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line">或者也可以使用&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**`&lt;pre&gt;&lt;code&gt;代码段&lt;/code&gt;&lt;/pre&gt;`**&lt;/font&gt;</div><div class="line"></div><div class="line">###分割线</div><div class="line">最常使用的分割线用3个或以上的`*`,还可以用`-`和`_`</div><div class="line">******</div><div class="line">###链接</div><div class="line">链接分作下列形式</div><div class="line">####1.行内式</div><div class="line">&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**`[名称](链接)`**&lt;/font&gt;</div><div class="line">&lt;br&gt;比如：[百度](https://www.baidu.com)</div><div class="line">####2.参考式</div><div class="line">&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**`[名称1][1]`**&lt;/font&gt;</div><div class="line">&lt;br&gt;&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**`[名称2][2]`**&lt;/font&gt;</div><div class="line">&lt;br&gt;&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**`[1]:链接1`**&lt;/font&gt;</div><div class="line">&lt;br&gt;&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**`[2]:链接2`**&lt;/font&gt;</div><div class="line">&lt;br&gt;比如：[百度][1]</div><div class="line">[1]:https://www.baidu.com</div><div class="line">####3.自动链接式</div><div class="line">&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**</div><div class="line">`&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;`</div><div class="line">**&lt;/font&gt;</div><div class="line">&lt;br&gt;效果就是：</div><div class="line">&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</div><div class="line">###图片</div><div class="line">&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**`![Alt text](/path/to/img.jpg)`**&lt;/font&gt;</div><div class="line"></div><div class="line">&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**`![Alt text](/path/to/img.jpg &quot;Optional title&quot;)`**&lt;/font&gt;</div><div class="line"></div><div class="line">一个感叹号!开头；</div><div class="line">其后紧跟一对中括号，中括号内存放图片的alt`属性；</div><div class="line">其后紧跟一对小括号，小括号内存放图片的URL或路径，及可选的用双引号或单引号或小括号括起来的图片title</div><div class="line">这里 &quot;id&quot; 是图片引用标识。图片引用定义的语法与链接定义完全相同：</div><div class="line">&lt;br&gt;</div><div class="line">####插入外链接图片：</div><div class="line">&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;**</div><div class="line">`![说明]:(url/to/image)`</div><div class="line">**&lt;/font&gt;</div><div class="line">###表格</div><div class="line">制作表格有两种方法:</div><div class="line">####1.html原生表格</div></pre></td></tr></table></figure></font></p>
<p><table><br> <tr><br>     <td>时间</td><br>     <td>地点</td><br>     <td>人物</td><br> </tr><br>  <tr><br>     <td>1.1</td><br>     <td>深圳</td><br>     <td>马化腾</td><br> </tr><br>  <tr><br>     <td>1.2</td><br>     <td>北京</td><br>     <td>雷军</td><br> </tr><br></table><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line">&lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;div class=&quot;span4&quot;&gt;</div><div class="line">        &lt;table&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line"> 	&lt;td&gt;时间&lt;/td&gt;</div><div class="line"> 	&lt;td&gt;地点&lt;/td&gt;</div><div class="line"> 	&lt;td&gt;人物&lt;/td&gt;</div><div class="line"> &lt;/tr&gt;</div><div class="line">  &lt;tr&gt;</div><div class="line"> 	&lt;td&gt;1.1&lt;/td&gt;</div><div class="line"> 	&lt;td&gt;深圳&lt;/td&gt;</div><div class="line"> 	&lt;td&gt;马化腾&lt;/td&gt;</div><div class="line"> &lt;/tr&gt;</div><div class="line">  &lt;tr&gt;</div><div class="line"> 	&lt;td&gt;1.2&lt;/td&gt;</div><div class="line"> 	&lt;td&gt;北京&lt;/td&gt;</div><div class="line"> 	&lt;td&gt;雷军&lt;/td&gt;</div><div class="line"> &lt;/tr&gt;</div><div class="line">        &lt;/table&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;</div></pre></td></tr></table></figure></p>
<p><div class="row"><br>    <div class="span4"><br>        <table><br>            …<br>        </table><br>    </div><br></div><br>```<br><br>如果想占更多或更少的宽度，把<font size="4" face="黑体" color="#8B008B">span4</font>修改为其他值，如<font size="4" face="黑体" color="#8B008B">span6</font>（总宽度是<font size="4" face="黑体" color="#8B008B">span8</font>，按比例算下就行）<br><br></p>
<p>####2.markdown原生表格<br>或者像下面那样:<br><code>`&lt;br&gt;</code>|水果|价格|数量|<br><code>&lt;br&gt;</code>|:-|:-:|-:|<br><code>&lt;br&gt;</code>|香蕉|$1|5|<br><code>&lt;br&gt;</code>|苹果|$1|6|<br><code>&lt;br&gt;</code>|草莓|$1|7|<br>`<br><br><br><br><br>效果：<br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">水果</th>
<th style="text-align:center">价格</th>
<th style="text-align:right">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">香蕉</td>
<td style="text-align:center">$1</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td style="text-align:left">苹果</td>
<td style="text-align:center">$1</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td style="text-align:left">草莓</td>
<td style="text-align:center">$1</td>
<td style="text-align:right">7</td>
</tr>
</tbody>
</table>
<p><br></p>
<p>又比如下面的效果：</p>
<table>
<thead>
<tr>
<th>函数名称</th>
<th>说明</th>
<th>ID</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>help()</code></td>
<td>展示帮助窗口</td>
</tr>
<tr>
<td><code>delete()</code></td>
<td><strong>删除文件</strong></td>
<td>2</td>
</tr>
<tr>
<td><code>copy()</code></td>
<td><em>复制文件</em></td>
<td>3</td>
</tr>
</tbody>
</table>
<p>实现方式:<br><code>`&lt;br&gt;</code>| 函数名称 | 说明 | ID|<br><code>&lt;br&gt;</code>| ——–| ——– ||<br><code>&lt;br&gt;</code>| <code>help()</code> | 展示帮助窗口 |<br><code>&lt;br&gt;</code>| <code>delete()</code> | <strong>删除文件</strong> |2|<br><code>&lt;br&gt;</code>| <code>copy()</code>  | <em>复制文件</em> | 3|<br>`<br><br></p>
<p>可以看出，实际上表格的输入不一定要是对称的，并且首行一定是加粗，作者也可以在表格内自定义表格内容的文字效果</p>
<p>另外，如果需要表头跟内容不一样，可以将<font size="4" face="黑体" color="#8B008B"><strong><code>&lt;td&gt;</code>表头内容<code>&lt;/td&gt;</code></strong></font>换成<font size="4" face="黑体" color="#8B008B"><strong><code>&lt;th&gt;</code>表头内容<code>&lt;/th&gt;</code></strong></font>。</p>
<p>如果表格内文需要换行，可以在要换行的内容后加入</p>
<p><font size="4" face="黑体" color="#8B008B"><strong><code>&lt;br&gt;</code></strong></font>，后面的内容就会跑到下一行。</p>
<p>如果有跨行或者跨列的单元格，可用<font size="4" face="黑体" color="#8B008B"><strong><code>&lt;th colspan=&quot;跨列数&quot;&gt;内容&lt;/th&gt;</code></strong></font>。<br>跨行则是用rowspan=”跨行数”。</p>
<p>如果要调整某一列的宽度，可使用：<font size="4" face="黑体" color="#8B008B"><strong><code>&lt;th width=&quot;宽度值或百分比&quot;&gt;表头内容&lt;/th&gt;</code></strong></font>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;&lt;strong&gt;&lt;strong&gt;&lt;/font&gt;&lt;br&gt;&lt;font size=3 face=&quot;黑体&quot; color=#8B008B&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;

&lt;center&gt;&lt;h1&gt;MarkDown常用技巧&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;可参考:&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://www.markdown.cn/&quot;&gt;&lt;font size=4&gt;markdown中文网&lt;/font&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/19963642&quot;&gt;知乎：markdown是什么&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/column/details/markdown.html&quot;&gt;CSDN markdown专栏&lt;/a&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;
&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;MarkDown作者Aaron Swartz:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;center&gt;![MarkDown作者] (“&lt;a href=&quot;https://pic4.zhimg.com/606e14127233ca0a935032b19b5df3a7_b.jpg&quot;&gt;https://pic4.zhimg.com/606e14127233ca0a935032b19b5df3a7_b.jpg&lt;/a&gt;“)&lt;/center&gt;

&lt;p&gt;&lt;a href=&quot;http://www.rememberaaronsw.com/memories/&quot;&gt;纪念斯沃茨的网站(markdown编写)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###标题&lt;br&gt;标题共有6级，用&lt;strong&gt;&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;#&lt;/font&gt;&lt;/strong&gt;表示，后面接内容，&lt;strong&gt;&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;#&lt;/font&gt;&lt;/strong&gt;越多代表级别越高，尺寸越小&lt;/p&gt;
&lt;p&gt;###加粗，斜体&lt;br&gt;在需要加粗的文字两端加入&lt;strong&gt;&lt;font size=3 face=&quot;黑体&quot; color=#8B008B&gt;`&lt;/strong&gt;加粗文字&lt;strong&gt;`&lt;/font&gt;&lt;/strong&gt;&lt;br&gt;或者&lt;font size=3 face=&quot;黑体&quot; color=#8B008B&gt;&lt;strong&gt;&lt;code&gt;_加粗文字_&lt;/code&gt;&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;如果要输出斜体效果，那么就是单个的&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;&lt;strong&gt;&lt;code&gt;*&lt;/code&gt;&lt;/strong&gt;&lt;/font&gt;或者是单个的&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;&lt;strong&gt;&lt;code&gt;_&lt;/code&gt;&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;而且，加粗和斜体标识最好都是放在&lt;font size=4 face=&quot;黑体&quot; color=#8B008B&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/font&gt;内&lt;br&gt;
    
    </summary>
    
    
      <category term="MarkDown" scheme="https://simonid.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>hexo与github搭建个人博客</title>
    <link href="https://simonid.github.io/2017/01/17/hexo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://simonid.github.io/2017/01/17/hexo与github搭建个人博客/</id>
    <published>2017-01-17T08:08:08.000Z</published>
    <updated>2017-03-08T05:21:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="黑体" color="#0000ff" size="10">HEXO与Github.io搭建个人博客</font></center></p>
<p>###HEXO搭建<br>&nbsp;&nbsp;&nbsp;&nbsp;HEXO是基于Node.JS的一款简单快速的博客框架，能够支持多线程，支持markdown，可以将生成的静态网页发布到github.io以及coding上。<br>要使用搭建HEXO博客，先安装hexo<br>1.安装node.js</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>sudo apt-get install -y python-software-properties software-properties-common<br>sudo add-apt-repository ppa:chris-lea/node.js<br>sudo apt-get update<br>sudo apt-get install nodejs<br></font></td></tr></table><br>2.安装npm<br>&nbsp;&nbsp;&nbsp;&nbsp;npm全名：Node Package Manager，是Nodejs的包管理器。<br>ubuntu16.04LTS自带nodejs和npm，但是版本较低，假如要安装最新的，先移除自带的。</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>sudo apt-get remove nodejs &amp;&amp; sudo apt-get remove npm<br></font></td></tr></table><br>再清理依赖包：</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>sudo apt-get  autoremove<br></font></td></tr></table><br><br><br>官网上下载nodejs：</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>cd /opt &amp;&amp; wget <a href="https://nodejs.org/dist/v4.4.5/node-v4.4.5-linux-x64.tar.xz" target="_blank" rel="external">https://nodejs.org/dist/v4.4.5/node-v4.4.5-linux-x64.tar.xz</a><br>xz -d node-v4.4.5-linux-x64.tar.xz &amp;&amp; tar vxf node-v4.4.5-linux-x64.tar<br></font></td></tr></table><br><a id="more"></a><br>让任意目录可以访问，先配置环境变量</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>sudo vim /etc/profile<br></font></td></tr></table><br>文件最后加上</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>export PATH=$PATH:/opt/node-v4.4.5-linux-x64/bin<br></font></td></tr></table><br>也可以通过软链接，使得任意目录可访问<br>将node和npm链接到系统默认的PATH目录下的一个，软链接方式如下</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>ln -s /home/simon/node-v4.4.5-linux-x64/bin/node /usr/local/bin/node<br>ln -s /home/simon/node-v4.4.5-linux-x64/bin/npm /usr/local/bin/npm<br></font></td></tr></table><br>同步文件配置：</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>source /etc/profile<br></font></td></tr></table><br>查看版本：</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>node –version &amp;&amp; npm –version<br></font></td></tr></table><br>3.安装hexo<br>国外站点网速较慢，建议换成淘宝站点</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>npm install -g npm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a><br>npm –version<br></font></td></tr></table><br>接下来安装hexo-cli<br>切换到一个合适的目录下</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>npm install -g hexo-cli<br></font></td></tr></table><br>下载完毕之后可以检测一下：<br>hexo –version<br>4.配置<br>hexo本地文件在安装插件的时候，最好都是用root身份执行，不然经常遇到一些问题<br>初始化本地路径</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>cd /home/simon/hexo &amp;&amp; hexo init<br></font></td></tr></table><br>生成node_modules</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>npm install<br></font></td></tr></table><br>生成本地博客</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>hexo g<br><br>hexo server<br></font></td></tr></table><br>在浏览器下输入<font color="#0000ff"><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></font>，成功的话就生成hexo的标准界面</p>
<p>###部署到github<br>&nbsp;&nbsp;&nbsp;&nbsp;新建一个repository，例如web（网上说要把名字设置成your_github_name.github.io这种格式，否则会404，但是我没有采用，也能生成）<br>修改hexo根目录下的_config.yml，新增关联仓库<br>deploy:<br>  type: git<br>  repository: <a href="https://github.com/simonid/web.git" target="_blank" rel="external">https://github.com/simonid/web.git</a><br>  branch: master<br>注意了，变量名之前要有两个空格，参数值前要有一个空格，通过:分割<br>假如格式不对，不能被识别，比如：<br>You should configure deployment settings in _config.yml first!</p>
<p>Available deployer plugins:<br>  git</p>
<p>这样的错误<br>或者：FATAL remote: Repository not found.<br>完成之后，到github上完成部署<br>在项目的setting项找到Github Pages，生成项目<br>回到终端<br></p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>hexo deploy<br></font></td></tr></table><br>如果报错说缺少deployer：npm install hexo-deployer-git –save<br>打开 <a href="https://simonid.github.io/web/">https://simonid.github.io/web/</a> 就可以看到效果，同时自己的github项目也会有文件更新<br>注：中途可能遇到github的配置问题，请尝试用ssh<br>ssh-keygen -C “username@email.com” -t rsa</p>
<p>Note: “username@email.com”需要更换成你在Github上注册的Email地址或者是Username<br>这样会在家目录生成一个公钥文件夹.ssh，其中id_rsa.pub是Github需要的SSH公钥文件。复制后粘贴到github上<br>hexo简写命令格式：</p>
<p><table><tr><td bgcolor="blanchedAlmond"><font color="#dc143c"><br>hexo g == hexo generate(生成静态网页)<br><br><br><br>hexo d == hexo deploy（部署）<br><br><br><br>hexo s == hexo server（测试）<br><br><br><br>hexo n xxx （new article）<br><br><br><br>hexo clean<br><br><br><br>hexo help<br></font></td></tr></table><br>&nbsp;&nbsp;&nbsp;&nbsp;还有其他选项：<br>init 创建一个hexo项目<br>migrate 从其他系统向hexo迁移<br>version 查看hexo的版本<br>–config参数，指定配置文件，代替默认的_config.yml<br>–debug参数，调试模式，输出所有日志信息<br>–safe参数，安全模式，禁用所有的插件和脚本<br>–silent参数，无日志输出模式<br>hexo有许多的主题和插件，可以通过npm、git工具来进行下载，放在theme下<br>hexo根目录的目录及文件说明：</p>
<pre><code>scaffolds 脚手架，也就是一个工具模板
scripts 写文件的js，扩展hexo的功能
source 存放博客正文内容
source/_drafts 草稿箱
source/_posts 文件箱
themes 存放皮肤的目录
themes/landscape 默认的皮肤
_config.yml 全局的配置文件
db.json 静态常量
</code></pre><p>_posts目录：Hexo是一个静态博客框架，因此没有数据库。文章内容都是以文本文件方式进行存储的，直接存储在_posts的目录。Hexo天生集成了markdown，我们可以直接使用markdown语法格式写博客，例如:hello-world.md。新增加一篇文章，就在_posts目录，新建一个xxx.md的文件。</p>
<p>themes目录：是存放皮肤的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。</p>
<p>###全局配置</p>
<p>_config.yml是全局的配置文件：很多的网站配置都在这个文件中定义。</p>
<pre><code>站点信息: 定义标题，作者，语言
URL: URL访问路径
文件目录: 正文的存储目录
写博客配置：文章标题，文章类型，外部链接等
目录和标签：默认分类，分类图，标签图
归档设置：归档的类型
服务器设置：IP，访问端口，日志输出
时间和日期格式： 时间显示格式，日期显示格式
分页设置：每页显示数量
评论：外挂的Disqus评论系统
插件和皮肤：换皮肤，安装插件
Markdown语言：markdown的标准
CSS的stylus格式：是否允许压缩
部署配置：github发布
</code></pre><p><a href="http://www.tuicool.com/articles/y6JJV3Z" target="_blank" rel="external"><font color="#DC143C">最详细的资料</font><br></a><br><br><br><a href="http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html" target="_blank" rel="external">其他资料1</a><br><br><br><a href="http://www.aichengxu.com/other/10706481.htm" target="_blank" rel="external">其他资料2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;黑体&quot; color=#0000ff size=10&gt;HEXO与Github.io搭建个人博客&lt;/font&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;###HEXO搭建&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HEXO是基于Node.JS的一款简单快速的博客框架，能够支持多线程，支持markdown，可以将生成的静态网页发布到github.io以及coding上。&lt;br&gt;要使用搭建HEXO博客，先安装hexo&lt;br&gt;1.安装node.js&lt;/p&gt;
&lt;p&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=blanchedAlmond&gt;&lt;font color=#dc143c&gt;&lt;br&gt;sudo apt-get install -y python-software-properties software-properties-common&lt;br&gt;sudo add-apt-repository ppa:chris-lea/node.js&lt;br&gt;sudo apt-get update&lt;br&gt;sudo apt-get install nodejs&lt;br&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;2.安装npm&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;npm全名：Node Package Manager，是Nodejs的包管理器。&lt;br&gt;ubuntu16.04LTS自带nodejs和npm，但是版本较低，假如要安装最新的，先移除自带的。&lt;/p&gt;
&lt;p&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=blanchedAlmond&gt;&lt;font color=#dc143c&gt;&lt;br&gt;sudo apt-get remove nodejs &amp;amp;&amp;amp; sudo apt-get remove npm&lt;br&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;再清理依赖包：&lt;/p&gt;
&lt;p&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=blanchedAlmond&gt;&lt;font color=#dc143c&gt;&lt;br&gt;sudo apt-get  autoremove&lt;br&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;&lt;br/&gt;&lt;br&gt;官网上下载nodejs：&lt;/p&gt;
&lt;p&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=blanchedAlmond&gt;&lt;font color=#dc143c&gt;&lt;br&gt;cd /opt &amp;amp;&amp;amp; wget &lt;a href=&quot;https://nodejs.org/dist/v4.4.5/node-v4.4.5-linux-x64.tar.xz&quot;&gt;https://nodejs.org/dist/v4.4.5/node-v4.4.5-linux-x64.tar.xz&lt;/a&gt;&lt;br&gt;xz -d node-v4.4.5-linux-x64.tar.xz &amp;amp;&amp;amp; tar vxf node-v4.4.5-linux-x64.tar&lt;br&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="https://simonid.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://simonid.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://simonid.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
